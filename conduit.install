<?php
/**
 * @file
 * Provides installation functions.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Implements hook_install().
 */
function conduit_install() {
  // Create all the fields.
  foreach (conduit_install_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  foreach (conduit_install_instances() as $instance) {
    $instance['entity_type'] = 'node';
    field_create_instance($instance);
  }

  // Set content type specific variables.
  foreach (array_keys(conduit_node_info()) as $type) {
    // Publish all content types, but nothing more.
    variable_set('node_options_' . $type, array('status'));

    // Set pathauto patterns.
    variable_set('pathauto_node_' . $type . '_pattern', str_replace('_', '/', $type) . '/[node:title]');
  }
  variable_set('node_options_conduit_job', array('status', 'revision'));
}

/**
 * Implements hook_uninstall().
 */
function conduit_uninstall() {
  // Delete all nodes of conduit content types.
  $types = array_keys(conduit_node_info());
  $nids = db_select('node')
    ->fields('node', array('nid'))
    ->condition('type', $types, 'IN')
    ->execute()
    ->fetchCol();
  if ($nids) {
    node_delete_multiple($nids);
  }

  // Delete fields.
  foreach (array_keys(conduit_install_fields()) as $field) {
    field_delete_field($field);
  }

  // Remove field instances.
  foreach ($types as $type) {
    $instances = field_info_instances('node', $type);
    foreach ($instances as $instance_name => $instance) {
      field_delete_instance($instance);
    }
  }

  // Delete content types.
  foreach ($types as $type) {
    node_type_delete($type);
  }

  // Purge all field infromation
  field_purge_batch(1000);

  // Remove content type settings variables.
  foreach (array_keys(conduit_node_info()) as $type) {
    variable_del('node_options_' . $type);
    variable_del('pathauto_node_' . $type . '_pattern');
  }
}

/**
 * Field definitions to be installed.
 *
 * @return
 *   List of field definitions.
 */
function conduit_install_fields() {
  $t = get_t();
  return array(
    // Conduit client and worker fields.
    'conduit_key' => array(
      'field_name' => 'conduit_key',
      'type' => 'text',
      'settings' => array(
        'max_length' => 64,
      ),
    ),

    // Conduit worker fields.
    'conduit_plugins' => array(
      'field_name' => 'conduit_plugins',
      'type' => 'list',
      'cardinality' => -1,
      'settings' => array(
        'max_length' => 64,
        'allowed_values' =>
          "foo|bar\n" .
          "foo2|bar2\n", // @TODO: Get a list of plugins and update when new modules installed.
      ),
    ),

    // Conduti group and job fields.
    'conduit_properties' => array(
      'field_name' => 'conduit_properties',
      'type' => 'text_long',
    ),

    // Conduit group fields.
    'conduit_owner' => array(
      'field_name' => 'conduit_owner',
      'type' => 'node_reference',
      'settings' => array(
        'referenceable_types' => array('conduit_client'),
      ),
    ),
    'conduit_parent' => array(
      'field_name' => 'conduit_parent',
      'type' => 'node_reference',
      'settings' => array(
        'referenceable_types' => array('conduit_group'),
      ),
    ),
  );
}

/**
 * Field instances to be created.
 *
 * @return
 *   List of field instances.
 */
function conduit_install_instances() {
  $t = get_t();
  return array(
    // Conduit client instances.
    'client_conduit_key' => array(
      'bundle' => 'conduit_client',
      'field_name' => 'conduit_key',
      'label' => $t('Key'),
      'description' => $t('Unique key used for identification during inter-server communciation. Must be between 32 and 64 characters in length.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),

    // Conduit worker instances.
    'worker_conduit_key' => array(
      'bundle' => 'conduit_worker',
      'field_name' => 'conduit_key',
      'label' => $t('Key'),
      'description' => $t('Unique key used for identification during inter-server communciation. Must be between 32 and 64 characters in length.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'worker_conduit_plugins' => array(
      'bundle' => 'conduit_worker',
      'field_name' => 'conduit_plugins',
      'label' => $t('Plugins'),
      'description' => $t('Plugins supported by the worker.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_buttons',
      ),
    ),

    // Conduit group instances.
    'group_conduit_owner' => array(
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_owner',
      'label' => $t('Owner'),
      'description' => $t('Client that owns the group and thus controls the jobs within it.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'node_reference_autocomplete',
        'settings' => array(
          'autocomplete_match' => 'starts_with'
        ),
      ),
    ),
    'group_conduit_parent' => array(
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_parent',
      'label' => $t('Parent'),
      'description' => $t('Optional reference to parent group.'),
      'widget' => array(
        'type' => 'node_reference_autocomplete',
        'settings' => array(
          'autocomplete_match' => 'starts_with'
        ),
      ),
    ),
    'group_conduit_properties' => array(
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_properties',
      'label' => $t('Properties'),
      'description' => $t('Array of properties in valid PHP syntax, excluding the array( ... ). For example "foo", "bar" would produce an array with those two values.'),
      'widget' => array(
        'type' => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'type' => 'conduit_properties',
        ),
      ),
    ),
  );
}
