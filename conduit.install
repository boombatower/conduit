<?php
/**
 * @file
 * Provides installation functions.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 * @author Jim Berry ("boombatower", http://drupal.org/user/240748)
 */

/**
 * Implements hook_install().
 */
function conduit_install() {
  conduit_install_node_type('conduit_group', 'group');
  field_helper_install_all('conduit');

  // Setup conduit roles.
  $roles = array();
  foreach (array('client', 'worker') as $name) {
    user_role_save($role = (object) array('name' => 'conduit ' . $name));
    $roles[$name] = user_role_load_by_name($role->name);
  }

  user_role_grant_permissions($roles['client']->rid, conduit_client_permissions());
  user_role_grant_permissions($roles['worker']->rid, array('claim conduit item', 'result conduit item'));
}

/**
 * Implements hook_uninstall().
 */
function conduit_uninstall() {
  conduit_uninstall_node_type('conduit_group');
  field_helper_uninstall_all('conduit');

  // Remove each category job queue that was ever used.
  $categories = variable_get('conduit_categories', array());
  foreach ($categories as $category) {
    DrupalQueue::get('conduit_job_' . $category)->deleteQueue();
  }

  // Remove variables.
  $variables = array(
    'conduit_categories',
    'conduit_lease_time',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }

  // Remove conduit roles if they exist.
  foreach (array('client', 'worker') as $role) {
    if (user_role_load_by_name('conduit ' . $role)) {
      user_role_delete('conduit ' . $role);
    }
  }
}

/**
 * Install settings for a node type.
 *
 * @param $type
 *   Node type.
 * @param $path
 *   (Optional) Path to use in pathauto setting.
 */
function conduit_install_node_type($type, $path = 'job') {
  // Publish all content types, but nothing more.
  variable_set('node_options_' . $type, array('status'));

  // Disable comments.
  module_load_include('module', 'comment');
  variable_set('comment_' . $type, COMMENT_NODE_CLOSED);

  // Set pathauto patterns.
  variable_set('pathauto_node_' . $type . '_pattern', 'conduit/' . $path . '/[node:title]');
}

/**
 * Remove all data and settings for a node type.
 *
 * @param $type
 *   Node type.
 */
function conduit_uninstall_node_type($type) {
  // Delete all nodes of specified type.
  $nids = db_select('node')
    ->fields('node', array('nid'))
    ->condition('type', $type)
    ->execute()
    ->fetchCol();
  if ($nids) {
    node_delete_multiple($nids);
  }

  // Remove content type settings variables.
  variable_del('node_options_' . $type);
  variable_del('comment_' . $type);
  variable_del('pathauto_node_' . $type . '_pattern');
}

/**
 * Implements hook_install_fields().
 */
function conduit_install_fields() {
  return array(
    // Conduit group and job fields.
    'conduit_parent' => array(
      'field_name' => 'conduit_parent',
      'type' => 'node_reference',
      'settings' => array(
        'referenceable_types' => array('conduit_group'),
      ),
    ),
    'conduit_properties' => array(
      'field_name' => 'conduit_properties',
      'type' => 'serial_long',
    ),

    // Conduit job fields.
    'conduit_done' => array(
      'field_name' => 'conduit_done',
      'type' => 'number_boolean',
    ),
    'conduit_chunk_count' => array(
      'field_name' => 'conduit_chunk_count',
      'type' => 'number_integer',
    ),
    'conduit_pass' => array(
      'field_name' => 'conduit_pass',
      'type' => 'number_boolean',
    ),
    'conduit_summary' => array(
      'field_name' => 'conduit_summary',
      'type' => 'text_long',
    ),
    'conduit_chunk_pass' => array(
      'field_name' => 'conduit_chunk_pass',
      'type' => 'number_boolean',
      'cardinality' => -1,
    ),
    'conduit_log' => array(
      'field_name' => 'conduit_log',
      'type' => 'text_long',
      'cardinality' => -1,
    ),
  );
}

/**
 * Implements hook_install_instances().
 */
function conduit_install_instances() {
  $t = get_t();
  return array(
    // Conduit group instances.
    'group_conduit_parent' => array(
      'entity_type' => 'node',
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_parent',
      'label' => $t('Parent'),
      'description' => $t('Reference to parent group.'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'node_reference_autocomplete',
        'settings' => array(
          'autocomplete_match' => 'starts_with',
        ),
      ),
    ),
    'group_conduit_properties' => array(
      'entity_type' => 'node',
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_properties',
      'label' => $t('Properties'),
      'description' => $t('Array of properties in valid PHP syntax, excluding the array( ... ). For example "foo", "bar" would produce an array with those two values.'),
      'widget' => array(
        'type' => 'serial_textarea',
      ),
    ),
  );
}

/**
 * Base job field instances.
 *
 * @param $type
 *   Node type to assign instances to.
 * @return
 *   Associative array of field instances with unique keys.
 * @see hook_install_instances()
 */
function conduit_install_instances_job($type) {
  $t = get_t();
  $instances = array(
    'job_conduit_parent' => array(
      'field_name' => 'conduit_parent',
      'label' => $t('Parent'),
      'description' => $t('Reference to parent group.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'node_reference_autocomplete',
        'settings' => array(
          'autocomplete_match' => 'starts_with',
        ),
      ),
    ),
    'job_conduit_properties' => array(
      'field_name' => 'conduit_properties',
      'label' => $t('Properties'),
      'description' => $t('Array of properties in valid PHP syntax, excluding the array( ... ). For example "foo", "bar" would produce an array with those two values.'),
      'widget' => array(
        'type' => 'serial_textarea',
      ),
    ),
    'job_conduit_done' => array(
      'field_name' => 'conduit_done',
      'label' => $t('Done'),
      'description' => $t('Indicates whether job has completed. Set to FALSE until all job chunks have reported.'),
      'settings' => array('prefix' => 'Job finished', 'suffix' => ''),
      'widget' => array(
        'type' => 'boolean_checkbox',
      ),
    ),
    'job_conduit_chunk_count' => array(
      'field_name' => 'conduit_chunk_count',
      'label' => $t('Chunk count'),
      'description' => $t('Number of chunks in the job.'),
      'settings' => array('min' => '1'),
      'widget' => array(
        'type' => 'number',
      ),
    ),
    'job_conduit_pass' => array(
      'field_name' => 'conduit_pass',
      'label' => $t('Pass'),
      'description' => $t('Indicates whether all job chunks completed with no errors.'),
      'settings' => array('prefix' => 'Job finished with no errors', 'suffix' => ''),
      'widget' => array(
        'type' => 'boolean_checkbox',
      ),
    ),
    'job_conduit_summary' => array(
      'field_name' => 'conduit_summary',
      'label' => $t('Summary'),
      'description' => $t('Summary of the job result.'),
      'widget' => array(
        'type' => 'text_textarea',
      ),
    ),
    'job_conduit_chunk_pass' => array(
      'field_name' => 'conduit_chunk_pass',
      'label' => $t('Chunk pass'),
      'description' => $t('Indicates whether a particular job chunk completed with no errors.'),
      'settings' => array('prefix' => 'Job chunk', 'suffix' => 'finished with no errors'),
      'widget' => array(
        'type' => 'boolean_checkbox',
      ),
    ),
    'job_conduit_log' => array(
      'field_name' => 'conduit_log',
      'label' => $t('Log'),
      'description' => $t('Log created during completion of job by worker.'),
      'widget' => array(
        'type' => 'text_textarea',
      ),
    ),
  );

  // Assign bundle to each instance.
  foreach ($instances as &$instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $type;
  }
  return $instances;
}

/**
 * Updates fields and field instances.
 *
 * This function can be called by a hook_update_N() routine to automatically
 * update fields and instances.
 */
function conduit_update_fields() {
  // Load field definitions.
  $fields = field_read_fields();
  $field_names = array_keys($fields);

  // Update the fields.
  foreach (conduit_install_fields() as $field_name => $field) {
    if (in_array($field_name, $field_names)) {
      field_update_field($field + $fields[$field_name]);
    }
    else {
      field_create_field($field);
    }
  }

  $instances = array();
  foreach (conduit_node_info() as $bundle => $info) {
    $instances = array_merge($instances, field_read_instances(array('bundle' => $bundle)));
  }

  // Update the field instances.
  foreach (conduit_install_instances() as $conduit_instance) {
    $exists = FALSE;
    foreach ($instances as $instance) {
      if ($conduit_instance['field_name'] == $instance['field_name'] && $conduit_instance['bundle'] == $instance['bundle']) {
        $exists = TRUE;
        break;
      }
    }
    if ($exists) {
      field_update_field($conduit_instance + $instance);
    }
    else {
      $conduit_instance['entity_type'] = 'node';
      field_create_instance($conduit_instance);
    }
  }

  // Purge all field information.
  field_purge_batch(1000);

  // Display a message to the user.
  return t('Fields and field instances were updated/created.');
}
