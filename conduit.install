<?php
/**
 * @file
 * Provides installation functions.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 * @author Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

/**
 * Implements hook_install().
 */
function conduit_install() {
  conduit_install_node_type('conduit_group', 'group');
  field_helper_install_all('conduit');

  // Setup conduit roles.
  $roles = array();
  foreach (array('client', 'worker') as $name) {
    user_role_save($role = (object) array('name' => 'conduit ' . $name));
    $roles[$name] = user_role_load_by_name($role->name);
  }

  user_role_grant_permissions($roles['client']->rid, conduit_client_permissions());
  user_role_grant_permissions($roles['worker']->rid, array('claim conduit item', 'result conduit item'));
}

/**
 * Implements hook_uninstall().
 */
function conduit_uninstall() {
  conduit_uninstall_node_type('conduit_group');
  field_helper_uninstall_all('conduit');

  // Remove variables.
  $variables = array('conduit_lease_time');
  foreach ($variables as $variable) {
    variable_del($variable);
  }

  // Remove conduit roles if they exist.
  foreach (array('client', 'worker') as $role) {
    if (user_role_load_by_name('conduit ' . $role)) {
      user_role_delete('conduit ' . $role);
    }
  }
}

/**
 * Install settings for a node type.
 *
 * @param $type
 *   Node type.
 * @param $path
 *   (Optional) Path to use in pathauto setting.
 */
function conduit_install_node_type($type, $path = 'job') {
  // Publish all content types, but nothing more.
  variable_set('node_options_' . $type, $path == 'job' ? array('status', 'revision') : array('status'));

  // Do not show author or date information.
  variable_set('node_submitted_' . $type, FALSE);

  // Disable comments.
  module_load_include('module', 'comment');
  variable_set('comment_' . $type, COMMENT_NODE_CLOSED);

  // Set pathauto patterns.
  variable_set('pathauto_node_' . $type . '_pattern', 'conduit/' . $path . '/[node:title]');

  conduit_install_node_type_group($type);

  // If this node type represents a category that does not exist then create
  // the queue for the category.
  if ($category = conduit_install_category_update($type)) {
    DrupalQueue::get('conduit_job_' . $category)->createQueue();
  }
}

/**
 * Create meta field group for node type.
 *
 * @param $type
 *   Node type.
 */
function conduit_install_node_type_group($type) {
  $group = array(
    'group_name' => ($info = conduit_job_info($type)) ? $info['module'] : $type,
    'entity_type' => 'node',
    'bundle' => $type,
    'mode' => 'form',
    'parent_name' => '',
    'label' => 'Meta',
    'weight' => -10,
    'children' => array(
      'conduit_parent',
      'conduit_properties',
      'title',
    ),
    'format_type' => 'fieldset',
  );
  $group = (object) $group;
  field_group_create_field_group($group);
}

/**
 * Remove all data and settings for a node type.
 *
 * @param $type
 *   Node type.
 */
function conduit_uninstall_node_type($type) {
  // Delete all nodes of specified type.
  $nids = db_select('node')
    ->fields('node', array('nid'))
    ->condition('type', $type)
    ->execute()
    ->fetchCol();
  if ($nids) {
    node_delete_multiple($nids);
  }

  // Remove content type settings variables.
  variable_del('node_options_' . $type);
  variable_del('comment_' . $type);
  variable_del('pathauto_node_' . $type . '_pattern');

  conduit_uninstall_node_type_group($type);

  // If this node type represents a category that no longer exists then delete
  // the queue for the category.
  if ($category = conduit_install_category_update($type)) {
    DrupalQueue::get('conduit_job_' . $category)->deleteQueue();
  }
}

/**
 * Remove meta field group for node type.
 *
 * @param $type
 *   Node type.
 */
function conduit_uninstall_node_type_group($type) {
  $groups = field_group_read_groups(array(
    'group_name' => $name = (($info = conduit_job_info($type)) ? $info['module'] : $type),
  ));
  if ($groups && ($group = $groups['node'][$type]['form'][$name])) {
    field_group_delete_field_group($group, $group->mode);
  }
}

/**
 * Determine if the category has been "updated".
 *
 * If the node type is a job and the category it represents is not found in the
 * registered conduit categories then the category either needs to be created
 * or deleted.
 *
 * @return
 *   The category that has been "updated" or FALSE.
 * @see conduit_categories()
 */
function conduit_install_category_update($type) {
  drupal_static_reset('conduit_categories');
  $categories = conduit_categories();
  if ($info = conduit_job_info($type)) {
    return isset($categories[$info['category']]) ? FALSE : $info['category'];
  }
  return FALSE;
}

/**
 * Implements hook_install_fields().
 */
function conduit_install_fields() {
  return array(
    // Conduit group and job fields.
    'conduit_parent' => array(
      'field_name' => 'conduit_parent',
      'type' => 'node_reference',
      'settings' => array(
        'referenceable_types' => array('conduit_group'),
      ),
    ),
    'conduit_properties' => array(
      'field_name' => 'conduit_properties',
      'type' => 'serial_long',
    ),

    // Conduit job fields.
    'conduit_done' => array(
      'field_name' => 'conduit_done',
      'type' => 'number_boolean',
    ),
    'conduit_chunk_count' => array(
      'field_name' => 'conduit_chunk_count',
      'type' => 'number_integer',
    ),
    'conduit_status' => array(
      'field_name' => 'conduit_status',
      'type' => 'number_integer',
    ),
    'conduit_duration' => array(
      'field_name' => 'conduit_duration',
      'type' => 'number_integer',
    ),
    'conduit_summary' => array(
      'field_name' => 'conduit_summary',
      'type' => 'text',
    ),
    'conduit_chunk_status' => array(
      'field_name' => 'conduit_chunk_status',
      'type' => 'number_integer',
      'cardinality' => -1,
    ),
    'conduit_log' => array(
      'field_name' => 'conduit_log',
      'type' => 'text_long',
      'cardinality' => -1,
      'settings' => array(
        'field_suppress' => 'always',
        'views_base_table' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_install_instances().
 */
function conduit_install_instances() {
  $t = get_t();
  return array(
    // Conduit group instances.
    'group_conduit_parent' => array(
      'entity_type' => 'node',
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_parent',
      'label' => $t('Parent'),
      'description' => $t('Reference to parent group.'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'node_reference_autocomplete',
        'settings' => array(
          'autocomplete_match' => 'starts_with',
        ),
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'group_conduit_properties' => array(
      'entity_type' => 'node',
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_properties',
      'label' => $t('Properties'),
      'description' => $t('Array of properties in valid PHP syntax, excluding the array( ... ). For example "foo", "bar" would produce an array with those two values.'),
      'widget' => array(
        'type' => 'serial_textarea',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
  );
}

/**
 * Base job field instances.
 *
 * @param $type
 *   Node type to assign instances to.
 * @return
 *   Associative array of field instances with unique keys.
 * @see hook_install_instances()
 */
function conduit_install_instances_job($type) {
  $t = get_t();
  $instances = array(
    'job_conduit_parent' => array(
      'field_name' => 'conduit_parent',
      'label' => $t('Parent'),
      'description' => $t('Reference to parent group.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'node_reference_autocomplete',
        'settings' => array(
          'autocomplete_match' => 'starts_with',
        ),
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'job_conduit_properties' => array(
      'field_name' => 'conduit_properties',
      'label' => $t('Properties'),
      'description' => $t('Array of properties in valid PHP syntax, excluding the array( ... ). For example "foo", "bar" would produce an array with those two values.'),
      'widget' => array(
        'type' => 'serial_textarea',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'job_conduit_done' => array(
      'field_name' => 'conduit_done',
      'label' => $t('Done'),
      'description' => $t('Indicates whether job has completed. Set to FALSE until all job chunks have reported.'),
      'settings' => array(
        'none' => array('prefix' => 'Job is not set', 'suffix' => ''),
        'false' => array('prefix' => 'Job is not finished', 'suffix' => ''),
        'true' => array('prefix' => 'Job finished', 'suffix' => ''),
      ),
      'widget' => array(
        'type' => 'boolean_checkbox',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'job_conduit_chunk_count' => array(
      'field_name' => 'conduit_chunk_count',
      'label' => $t('Chunk count'),
      'description' => $t('Number of chunks in the job.'),
      'settings' => array('min' => '1'),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'job_conduit_status' => array(
      'field_name' => 'conduit_status',
      'label' => $t('Status'),
      'description' => $t('Indicates the lowest status acheived by all completed job chunks.'),
      'settings' => array('min' => '-1'),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'job_conduit_duration' => array(
      'field_name' => 'conduit_duration',
      'label' => $t('Duration'),
      'description' => $t('Indicates the the length of time elapsed processing the job.'),
      'settings' => array('min' => '0'),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'job_conduit_summary' => array(
      'field_name' => 'conduit_summary',
      'label' => $t('Summary'),
      'description' => $t('Summary of the job result.'),
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
      ),
    ),
    'job_conduit_chunk_status' => array(
      'field_name' => 'conduit_chunk_status',
      'label' => $t('Chunk status'),
      'description' => $t('Indicates a particular job chunk status.'),
      'settings' => array('min' => '0'),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'job_conduit_log' => array(
      'field_name' => 'conduit_log',
      'label' => $t('Log'),
      'description' => $t('Log created during completion of job by worker.'),
      'widget' => array(
        'type' => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
  );

  // Assign bundle to each instance.
  foreach ($instances as &$instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $type;
  }
  return $instances;
}

/**
 * Updates fields and field instances.
 *
 * This function can be called by a hook_update_N() routine to automatically
 * update fields and instances.
 */
function conduit_update_fields() {
  // Load field definitions.
  $fields = field_read_fields();
  $field_names = array_keys($fields);

  // Update the fields.
  foreach (conduit_install_fields() as $field_name => $field) {
    if (in_array($field_name, $field_names)) {
      field_update_field($field + $fields[$field_name]);
    }
    else {
      field_create_field($field);
    }
  }

  $instances = array();
  foreach (conduit_node_info() as $bundle => $info) {
    $instances = array_merge($instances, field_read_instances(array('bundle' => $bundle)));
  }

  // Update the field instances.
  foreach (conduit_install_instances() as $conduit_instance) {
    $exists = FALSE;
    foreach ($instances as $instance) {
      if ($conduit_instance['field_name'] == $instance['field_name'] && $conduit_instance['bundle'] == $instance['bundle']) {
        $exists = TRUE;
        break;
      }
    }
    if ($exists) {
      field_update_field($conduit_instance + $instance);
    }
    else {
      $conduit_instance['entity_type'] = 'node';
      field_create_instance($conduit_instance);
    }
  }

  // Purge all field information.
  field_purge_batch(1000);

  // Display a message to the user.
  return t('Fields and field instances were updated/created.');
}
