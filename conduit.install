<?php
/**
 * @file
 * Provides installation functions.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Implements hook_install().
 */
function conduit_install() {
  // Create all the fields.
  foreach (conduit_install_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  foreach (conduit_install_instances() as $instance) {
    $instance['entity_type'] = 'node';
    field_create_instance($instance);
  }

  // Load module with constant definitions.
  module_load_include('module', 'comment');

  // Set content type specific variables.
  foreach (array_keys(conduit_node_info()) as $type) {
    // Publish all content types, but nothing more.
    variable_set('node_options_' . $type, array('status'));

    // Disable comments.
    variable_set('comment_' . $type, COMMENT_NODE_CLOSED);

    // Set pathauto patterns.
    variable_set('pathauto_node_' . $type . '_pattern', str_replace('_', '/', $type) . '/[node:title]');
  }
  variable_set('node_options_conduit_job', array('status', 'revision'));

  // Create the job queue.
  DrupalQueue::get('conduit_job')->createQueue();
}

/**
 * Implements hook_uninstall().
 */
function conduit_uninstall() {
  // Delete all nodes of conduit content types.
  $types = array_keys(conduit_node_info());
  $nids = db_select('node')
    ->fields('node', array('nid'))
    ->condition('type', $types, 'IN')
    ->execute()
    ->fetchCol();
  if ($nids) {
    node_delete_multiple($nids);
  }

  // Delete fields.
  foreach (array_keys(conduit_install_fields()) as $field) {
    field_delete_field($field);
  }

  // Remove field instances.
  foreach ($types as $type) {
    $instances = field_info_instances('node', $type);
    foreach ($instances as $instance_name => $instance) {
      field_delete_instance($instance);
    }
  }

  // Delete content types.
  foreach ($types as $type) {
    node_type_delete($type);
  }

  // Purge all field information.
  field_purge_batch(1000);

  // Remove content type settings variables.
  foreach (array_keys(conduit_node_info()) as $type) {
    variable_del('node_options_' . $type);
    variable_del('comment_' . $type);
    variable_del('pathauto_node_' . $type . '_pattern');
  }

  // Remove job queue.
  DrupalQueue::get('conduit_job')->deleteQueue();

  // Remove variables.
  $variables = array(
    'conduit_lease_time',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Field definitions to be installed.
 *
 * @return
 *   List of field definitions.
 */
function conduit_install_fields() {
  $t = get_t();
  return array(
    // Conduit client and worker fields.
    'conduit_key' => array(
      'field_name' => 'conduit_key',
      'type' => 'text',
      'settings' => array(
        'max_length' => 64,
      ),
    ),

    // Conduit worker fields.
    'conduit_plugins' => array(
      'field_name' => 'conduit_plugins',
      'type' => 'list',
      'cardinality' => -1,
      'settings' => array(
        'max_length' => 64,
        'allowed_values' =>
          "foo|bar\n" .
          "foo2|bar2\n", // @TODO: Get a list of plugins and update when new modules installed.
      ),
    ),

    // Conduit client, group, and job fields.
    'conduit_properties' => array(
      'field_name' => 'conduit_properties',
      'type' => 'text_long',
    ),

    // Conduit group fields.
    'conduit_owner' => array(
      'field_name' => 'conduit_owner',
      'type' => 'node_reference',
      'settings' => array(
        'referenceable_types' => array('conduit_client'),
      ),
    ),

    // Conduit group and job fields.
    'conduit_parent' => array(
      'field_name' => 'conduit_parent',
      'type' => 'node_reference',
      'settings' => array(
        'referenceable_types' => array('conduit_client', 'conduit_group'),
      ),
    ),

    // Conduit job fields.
    'conduit_done' => array(
      'field_name' => 'conduit_done',
      'type' => 'list_boolean',
      'settings' => array(
        'allowed_values' => "0|No\n1|Job finished\n",
      ),
    ),
    'conduit_pass' => array(
      'field_name' => 'conduit_pass',
      'type' => 'list_boolean',
      'settings' => array(
        'allowed_values' => "0|No\n1|Job finished with no errors\n",
      ),
    ),
    'conduit_chunk_count' => array(
      'field_name' => 'conduit_chunk_count',
      'type' => 'number_integer',
    ),
    'conduit_chunk_pass' => array(
      'field_name' => 'conduit_chunk_pass',
      'type' => 'list_boolean',
      'cardinality' => -1,
      'settings' => array(
        'allowed_values' => "0|No\n1|Job chunk finished with no errors\n",
      ),
    ),
    'conduit_log' => array(
      'field_name' => 'conduit_log',
      'type' => 'text_long',
      'cardinality' => -1,
    ),
  );
}

/**
 * Field instances to be created.
 *
 * @return
 *   List of field instances.
 */
function conduit_install_instances() {
  $t = get_t();
  return array(
    // Conduit client instances.
    'client_conduit_key' => array(
      'bundle' => 'conduit_client',
      'field_name' => 'conduit_key',
      'label' => $t('Key'),
      'description' => $t('Unique key used for identification during inter-server communciation. Must be between 32 and 64 characters in length.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'client_conduit_properties' => array(
      'bundle' => 'conduit_client',
      'field_name' => 'conduit_properties',
      'label' => $t('Properties'),
      'description' => $t('Array of properties in valid PHP syntax, excluding the array( ... ). For example "foo", "bar" would produce an array with those two values.'),
      'widget' => array(
        'type' => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'type' => 'conduit_properties',
        ),
      ),
    ),

    // Conduit worker instances.
    'worker_conduit_key' => array(
      'bundle' => 'conduit_worker',
      'field_name' => 'conduit_key',
      'label' => $t('Key'),
      'description' => $t('Unique key used for identification during inter-server communciation. Must be between 32 and 64 characters in length.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
    'worker_conduit_plugins' => array(
      'bundle' => 'conduit_worker',
      'field_name' => 'conduit_plugins',
      'label' => $t('Plugins'),
      'description' => $t('Plugins supported by the worker.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_buttons',
      ),
    ),

    // Conduit group instances.
    'group_conduit_owner' => array(
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_owner',
      'label' => $t('Owner'),
      'description' => $t('Client that owns the group and thus controls the jobs within it.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'node_reference_autocomplete',
        'settings' => array(
          'autocomplete_match' => 'starts_with',
        ),
      ),
    ),
    'group_conduit_parent' => array(
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_parent',
      'label' => $t('Parent'),
      'description' => $t('Reference to parent client or group.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'node_reference_autocomplete',
        'settings' => array(
          'autocomplete_match' => 'starts_with',
        ),
      ),
    ),
    'group_conduit_properties' => array(
      'bundle' => 'conduit_group',
      'field_name' => 'conduit_properties',
      'label' => $t('Properties'),
      'description' => $t('Array of properties in valid PHP syntax, excluding the array( ... ). For example "foo", "bar" would produce an array with those two values.'),
      'widget' => array(
        'type' => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'type' => 'conduit_properties',
        ),
      ),
    ),

    // Conduit job instances.
    'job_conduit_parent' => array(
      'bundle' => 'conduit_job',
      'field_name' => 'conduit_parent',
      'label' => $t('Parent'),
      'description' => $t('Reference to parent client or group.'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'node_reference_autocomplete',
        'settings' => array(
          'autocomplete_match' => 'starts_with',
        ),
      ),
    ),
    'job_conduit_properties' => array(
      'bundle' => 'conduit_job',
      'field_name' => 'conduit_properties',
      'label' => $t('Properties'),
      'description' => $t('Array of properties in valid PHP syntax, excluding the array( ... ). For example "foo", "bar" would produce an array with those two values.'),
      'widget' => array(
        'type' => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'type' => 'conduit_properties',
        ),
      ),
    ),
    'job_conduit_done' => array(
      'bundle' => 'conduit_job',
      'field_name' => 'conduit_done',
      'label' => $t('Log'),
      'description' => $t('Indicates whether job has completed. Set to FALSE until all job chunks have reported.'),
      'widget' => array(
        'type' => 'options_onoff',
      ),
    ),
    'job_conduit_pass' => array(
      'bundle' => 'conduit_job',
      'field_name' => 'conduit_pass',
      'label' => $t('Pass'),
      'description' => $t('Indicates whether all job chunks completed with no errors.'),
      'widget' => array(
        'type' => 'options_onoff',
      ),
    ),
    'job_conduit_chunk_count' => array(
      'bundle' => 'conduit_job',
      'field_name' => 'conduit_chunk_count',
      'label' => $t('Chunk count'),
      'description' => $t('Number of chunks in the job.'),
      'widget' => array(
        'type' => 'number',
      ),
    ),
    'job_conduit_chunk_pass' => array(
      'bundle' => 'conduit_job',
      'field_name' => 'conduit_chunk_pass',
      'label' => $t('Chunk pass'),
      'description' => $t('Indicates whether a particular job chunk completed with no errors.'),
      'widget' => array(
        'type' => 'options_onoff',
      ),
    ),
    'job_conduit_log' => array(
      'bundle' => 'conduit_job',
      'field_name' => 'conduit_log',
      'label' => $t('Log'),
      'description' => $t('Log created during completion of job by worker.'),
      'widget' => array(
        'type' => 'text_textarea',
      ),
    ),
  );
}

/**
 * Updates fields and field instances.
 *
 * This function can be called by a hook_update_N() routine to automatically
 * update fields and instances.
 */
function conduit_update_fields() {
  // Load field definitions.
  $fields = field_read_fields();
  $field_names = array_keys($fields);

  // Update the fields.
  foreach (conduit_install_fields() as $field_name => $field) {
    if (in_array($field_name, $field_names)) {
      field_update_field($field + $fields[$field_name]);
    }
    else {
      field_create_field($field);
    }
  }

  $instances = array();
  foreach (conduit_node_info() as $bundle => $info) {
    $instances = array_merge($instances, field_read_instances(array('bundle' => $bundle)));
  }

  // Update the field instances.
  foreach (conduit_install_instances() as $conduit_instance) {
    $exists = FALSE;
    foreach ($instances as $instance) {
      if ($conduit_instance['field_name'] == $instance['field_name'] && $conduit_instance['bundle'] == $instance['bundle']) {
        $exists = TRUE;
        break;
      }
    }
    if ($exists) {
      field_update_field($conduit_instance + $instance);
    }
    else {
      $conduit_instance['entity_type'] = 'node';
      field_create_instance($conduit_instance);
    }
  }

  // Purge all field information.
  field_purge_batch(1000);

  // Display a message to the user.
  return t('Fields and field instances were updated/created.');
}
