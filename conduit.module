<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * @mainpage Conduit
 * Conduit is a job distribution system.
 *
 * For information on the base job properties see the
 * @link worker_perform worker_perform() @endlink.
 */

conduit_include('node');

/**
 * Implements hook_permission().
 */
function conduit_permission() {
  $permissions = array();

  foreach (array('meta', 'status', 'result') as $fieldset) {
    $permissions['edit conduit job ' . $fieldset] = array(
      'title' => t('Edit job @fieldset information.', array('@fieldset' => $fieldset)),
      'description' => t('Edit the fields conntained within the @fieldset fieldset.', array('@fieldset' => $fieldset)),
    );
  }

  $permissions['claim conduit item'] = array(
    'title' => t('Claim an item'),
    'description' => t('Claim an item from a category queue. <em>Required by all workers.</em>'),
  );
  $permissions['result conduit item'] = array(
    'title' => t('Store a result for an item'),
    'description' => t('Store a chunk result. <em>Required by all workers.</em>'),
  );

  return $permissions;
}

/**
 * Implements hook_user_view().
 */
function conduit_user_view($account, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $view = views_get_view('conduit_group_user');
    $view->override_path = $_GET['q'];
    $account->content['conduit_group'] = array(
      '#markup' => $view->preview('default', array($account->uid)),
      '#weight' => 10,
    );
  }
}

/**
 * Merge group and default properties together with entity's properties.
 *
 * The properties are merged in such a way that the lower the item is on the
 * list the more precedence it has and will those override any properties with
 * the same key from above. The order is as follows: defaults, groups, and job.
 * A tree of groups will be treated in same manor with the root group having
 * the least precedence.
 *
 * @param $node
 *   Either a group or job node.
 * @return
 *   Associative array of properties.
 */
function conduit_properties_merge($node) {
  // Start with the properties of the entity.
  $properties = !empty($node->conduit_properties) ? $node->conduit_properties[LANGUAGE_NONE][0]['value'] : array();

  // If the entity is a job then merge the default properties specified by the
  // plugin with the rest of the properties. Add the plugin property based on
  // job type.
  if ($info = conduit_job_info($node->type)) {
    $base_defaults = module_invoke('conduit', 'conduit_default_properties');
    $plugin_defaults = module_invoke($info['module'], 'conduit_default_properties');
    $properties = array_replace_recursive($base_defaults, $plugin_defaults, $properties);
    $properties['plugin'] = $info['plugin'];
  }

  // Find the relevant parent group or client the entity belongs to and merge
  // its merged properties array with the current entity.
  if (!empty($node->conduit_parent)) {
    $parent = node_load($node->conduit_parent[LANGUAGE_NONE][0]['nid']);
    $properties = array_replace_recursive($parent->conduit_properties_merged, $properties);
  }

  return $properties;
}

/**
 * Implements hook_conduit_default_properties().
 */
function conduit_conduit_default_properties() {
  return array(
    'context' => 3,
    'database' => 'mysql',
    'mask' => '/.*/',
    'newline' => 'unix',
    'nomask' => '/(\.\.?|CVS)$/',
    'patch' => array(),
    'path' => array(''),
    'setup' => array(),
    'ssh' => array(),
    'vcs' => array(),
    'verbose' => FALSE,
  );
}

/**
 * Determine job information based on the node type.
 *
 * @param $type
 *   Node type.
 * @return
 *   An associative array with the keys: module, category, and plugin,
 *   otherwise FALSE if the node type does not represent a job.
 */
function conduit_job_info($type) {
  if (strpos($type, 'conduit_job') === 0) {
    // All job node types should be in the form conduit_job_CATEGORY_PLUGIN.
    list(, , $category, $plugin) = explode('_', $type);
    return array(
      'module' => $category . '_' . $plugin,
      'category' => $category,
      'plugin' => $plugin,
    );
  }
  return FALSE;
}

/**
 * Implements hook_flush_caches().
 *
 * Rebuild the client role permissions.
 */
function conduit_flush_caches() {
  // Regenerate client role permissions.
  if ($role = user_role_load_by_name('conduit client')) {
    user_role_grant_permissions($role->rid, conduit_client_permissions());
  }
}

/**
 * Determine the conduit categories available given the job node types.
 *
 * @return
 *   Associative array of categories.
 */
function conduit_categories() {
  $categories = &drupal_static(__FUNCTION__);

  if (!$categories) {
    if ($cache = cache_get('conduit_categories')) {
      $categories = $cache->data;
    }
    else {
      $types = array_keys(node_type_get_names());
      $categories = array();
      foreach ($types as $type) {
        if ($info = conduit_job_info($type)) {
          $categories[$info['category']] = $info['category'];
        }
      }
      cache_set('conduit_categories', $categories);
    }
  }

  return $categories;
}

/**
 * Build a list of the client role permissions.
 *
 * @return
 *   List of client role permissions.
 */
function conduit_client_permissions() {
  $types = array_filter(array_keys(node_type_get_names()), 'conduit_node_type');
  $operations = array('create', 'edit own', 'delete own');
  $permissions = array('edit conduit job meta');
  foreach ($types as $type) {
    foreach ($operations as $operation) {
      $permissions[] = "$operation $type content";
    }
  }
  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function conduit_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'conduit') . '/views',
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function conduit_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    conduit_include('services');
    return array('version' => 3);
  }
}

/**
 * Load a conduit include file.
 *
 * @param $include
 *   Name of include file, exluding the .inc.
 */
function conduit_include($include) {
  require_once drupal_get_path('module', 'conduit') . '/includes/' . $include . '.inc';
}
