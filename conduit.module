<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * @mainpage Conduit
 * Conduit is a job distribution system.
 *
 * For information on the base job properties see the
 * @link worker_perform worker_perform() @endlink.
 */

/**
 * Always return: status, messages, result.
 * Use client hash which should include client key + time + salt.
 */

/**
 * Implements hook_hook_info().
 *
 * Load node.inc so node hooks are cached.
 */
function conduit_hook_info() {
  conduit_include('node');
}

/**
 * Implements hook_permission().
 */
function conduit_permission() {
  $permissions = array();

  foreach (array('meta', 'status', 'result') as $fieldset) {
    $permissions['edit conduit job ' . $fieldset] = array(
      'title' => t('Edit conduit job @fieldset information.', array('@fieldset' => $fieldset)),
      'description' => t('Edit the fields conntained within the @fieldset fieldset.', array('@fieldset' => $fieldset)),
    );
  }

  return $permissions;
}

/**
 * Implements hook_node_info().
 */
function conduit_node_info() {
  conduit_include('node');
  $info = array();

  $info['conduit_client'] = array(
    'name' => t('Conduit client'),
    'base' => 'conduit',
    'description' => t('Controls the conduit.'),
  );
  $info['conduit_group'] = array(
    'name' => t('Conduit group'),
    'base' => 'conduit',
    'description' => t('Groups jobs together and can be used to create a hierarchy.'),
  );
  $info['conduit_worker'] = array(
    'name' => t('Conduit worker'),
    'base' => 'conduit',
    'description' => t('Performs queued jobs.'),
  );

  return $info;
}

/**
 * Generate job node type definition for a plugin.
 *
 * @param $plugin
 *   Plugin name.
 * @return
 *   Node type definition to be used with hook_node_info().
 * @see hook_node_info()
 */
function conduit_node_info_job($plugin) {
  $title = ucfirst(str_replace('_', ' ', $plugin));
  return array(
    'conduit_job_' . $plugin => array(
      'name' => t('Conduit job - @plugin', array('@plugin' => $title)),
      'base' => 'conduit',
      'description' => t('Job, of type @plugin, to be performed.', array('@plugin' => $title)),
    ),
  );
}

/**
 * Evaluate properties input string.
 *
 * @return
 *   Evaluated value.
 */
function conduit_properties($string) {
  return @eval('return array(' . $string . ');');
}

/**
 * Merge group and default properties together with entity's properties.
 *
 * The properties are merged in such a way that the lower the item is on the
 * list the more precedence it has and will those override any properties with
 * the same key from above. The order is as follows: defaults, groups, and job.
 * A tree of groups will be treated in same manor with the root group having
 * the least precedence.
 *
 * @param $entity
 *   Either a group or job node.
 * @return
 *   Associative array of properties.
 */
function conduit_properties_merge($entity) {
  // Start with the properties of the entity.
  $properties = $entity->conduit['properties'];

  // Find the relevant parent group or client the entity belongs to, then
  // recurse through the group tree and merge the properties with those of the
  // entity. If the entity is a client then it is the root element and thus
  // does not belong to a group.
  if ($entity->type == 'conduit_group' || strpos($entity->type, 'conduit_job') === 0) {
    $properties = conduit_properties_recurse_groups(node_load($entity->conduit['parent']), $properties);
  }

  // If the merged list of properties contains a plugin key (all jobs must)
  // then merge the default properties specified by the plugin with the rest of
  // the properties.
  if (!empty($properties['plugin'])) {
    $default_properties = module_invoke($properties['plugin'], 'conduit_default_properties');
    $properties = array_replace_recursive($default_properties, $properties);
  }
  return $properties;
}

/**
 * Recursively merge the properties of a group hierarchy.
 *
 * @param $group
 *   The current group node being processed.
 * @param $properties
 *   The current array of merged properties.
 * @return
 *   Associative array of properties.
 */
function conduit_properties_recurse_groups($group, array $properties = array()) {
  $properties = array_replace_recursive($group->conduit['properties'], $properties);
  if (!empty($group->conduit['parent'])) {
    $properties = conduit_properties_recurse_groups(node_load($group->conduit['parent']), $properties);
  }
  return $properties;
}

/**
 * Implements hook_modules_enabled().
 *
 * When any modules are enabled rebuild the list of allowed_values for
 * conduit_category to ensure it is up-to-date.
 */
function conduit_modules_enabled() {
  // Determine the categories available given the job node types.
  conduit_include('node');
  $types = array_keys(node_type_get_types());
  $categories = array();
  foreach ($types as $type) {
    if (conduit_node_type_job($type)) {
      list(, , $category) = explode('_', $type);
      $categories[$category] = ucfirst($category);
    }
  }

  // Build list of allowed values.
  $allowed_values = '';
  foreach ($categories as $category => $title) {
    $allowed_values .= "$category|$title\n";
  }
  $allowed_values = trim($allowed_values);

  // Grab the field definitions and update the conduit_category field.
  module_load_include('install', 'conduit');
  $fields = conduit_install_fields();
  if ($fields['conduit_category']['settings']['allowed_values'] != $allowed_values) {
    $fields['conduit_category']['settings']['allowed_values'] = $allowed_values;
    field_update_field($fields['conduit_category']);
  }
}

/**
 * Implements hook_modules_disabled().
 */
function conduit_modules_disabled() {
  conduit_modules_enabled();
}

/**
 * Implements hook_views_api().
 */
function conduit_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'conduit') . '/views',
  );
}

/**
 * Implements hook_xmlrpc().
 *
 * All methods require authentication hash as the first parameter and will
 * return the standard conduit return value.
 *
 * <code>
 *   return array(
 *     'status' => ['authentication', 'accepted', 'denied']
 *     'messages' => array( [messages explaining status and/or what was done.] ),
 *     'result' => array( [structured data array containing the result of the
 *                         requested opperation.] )
 *   );
 * </code>
 *
 * Methods:
 * - job.create(array job)
 * - job.queue(int job_id)
 * - job.status(array job_ids)
 * - job.summary(int job_id)
 * - job.detail(int job_id)
 * - job.delete(int job_id)
 * - group.create(array group)
 * - group.delete(int group_id)
 * - server.status()
 */
function conduit_xmlrpc() {
  conduit_include('xmlrpc');

  // List of provided methods.
  $methods = array(
    'job.create' => t('Create a job.'),
    'job.queue' => t('Place an existing job in the queue.'),
    'job.status' => t('Query the status of a job or list of jobs.'),
    'job.summary' => t('Retrieve the summary of the result of a job.'),
    'job.detail' => t('Retrieve the detailed result of a job.'),
    'job.delete' => t('Delete a job.'),
    'group.create' => t('Create a job group.'),
    'group.delete' => t('Delete a job group.'),
    'server.status' => t('Query the server status.'),
  );

  // Generate hook_xmlrpc() XML-RPC definitions.
  $xmlrpc = array();
  foreach ($methods as $method => $description) {
    $xmlrpc[$method] = array(
      'conduit.' . $method,
      'conduit_xmlrpc_' . str_replace('.', '_', $method),
      array('struct', 'string', 'int'),
      $description,
    );
  }

  // Remove the third parameter or change data-type based on API definitions.
  $xmlrpc['job.create'][2][2] = 'struct';
  $xmlrpc['job.status'][2][2] = 'array';
  $xmlrpc['group.create'][2][2] = 'struct';
  unset($xmlrpc['server.status'][2][2]);

  return array_values($xmlrpc);
}

/**
 * Load a conduit include file.
 *
 * @param $include
 *   Name of include file, exluding the .inc.
 */
function conduit_include($include) {
  require_once drupal_get_path('module', 'conduit') . '/includes/' . $include . '.inc';
}
