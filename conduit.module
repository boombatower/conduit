<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * @mainpage Conduit
 * Conduit is a job distribution system.
 *
 * For information on the base job properties see the
 * @link worker_perform worker_perform() @endlink.
 */

/**
 * Status of job: failed during setup.
 */
define('CONDUIT_STATUS_SETUP', 1);

/**
 * Status of job: plugin encountered a failure.
 */
define('CONDUIT_STATUS_FAIL', 2);

/**
 * Status of job: pluging passed.
 */
define('CONDUIT_STATUS_PASS', 3);

conduit_include('node');

/**
 * Implements hook_permission().
 */
function conduit_permission() {
  $permissions = array();

  $permissions['view all conduit content'] = array(
    'title' => t('View all content'),
    'description' => t('Override the default behavior of only allowing the onwer to view their own content.'),
  );
  $permissions['view conduit log'] = array(
    'title' => t('View log'),
    'description' => t('View the log for a job.'),
  );
  $permissions['repeat conduit job'] = array(
    'title' => t('Repeat job'),
    'description' => t('Repeat a job without editting.'),
  );

  // Worker permissions.
  $permissions['claim conduit item'] = array(
    'title' => t('Claim an item'),
    'description' => t('Claim an item from a category queue. <em>Required by all workers.</em>'),
  );
  $permissions['result conduit item'] = array(
    'title' => t('Store a result for an item'),
    'description' => t('Store a chunk result. <em>Required by all workers.</em>'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function conduit_menu() {
  $items = array();

  $items['node/%node/properties'] = array(
    'title' => 'Properties',
    'page callback' => 'conduit_node_properties',
    'page arguments' => array(1),
    'access callback' => 'conduit_node_properties_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/revisions/%/properties'] = $items['node/%node/properties'];
  $items['node/%node/revisions/%/properties']['load arguments'] = array(3);
  $items['node/%node/revisions/%/properties']['access arguments'][] = TRUE;

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function conduit_menu_alter(&$items) {
  // Move view router item one level down to become parent for tabs.
  $items['node/%node/revisions/%'] = $items['node/%node/revisions/%/view'];

  // Override view router item to create a default local task.
  $items['node/%node/revisions/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
}


/**
 * Implements hook_user_view().
 */
function conduit_user_view($account, $view_mode, $langcode) {
  if ($view_mode == 'full' && in_array('conduit client', $account->roles)) {
    $view = views_get_view('conduit_group_user');
    $view->override_path = $_GET['q'];
    $view->execute();
    $account->content['conduit_group'] = array(
      '#markup' => $view->preview('default', array($account->uid)),
      '#access' => (bool) $view->total_rows || !empty($_GET['group_title']),
      '#weight' => 10,
    );
  }
}

/**
 * Implements hook_block_info().
 */
function conduit_block_info() {
  return array(
    'conduit' => array(
      'info' => t('conduit'),
      'cache' => DRUPAL_NO_CACHE,
      'status' => 1,
      'region' => 'sidebar_first',
      'weight' => -10,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function conduit_block_view($delta = '') {
  global $user;
  $block = array();

  // Only bother generating the list of jobs and group that can be created for
  // users with the 'conduit client' role.
  if (in_array('conduit client', $user->roles)) {
    // Check to see if on a user's own account page or a group/job node owned
    // by the user. To simplify things don't display the block to users viewing
    // user's groups/jobs.
    $types = array();
    $router_item = menu_get_item();
    if ($router_item['path'] == 'user/%' && ($account = menu_get_object('user')) && $account->uid == $user->uid) {
      $types = conduit_types();
      $types = array('conduit_group' => $types['conduit_group']);
    }
    elseif ($router_item['path'] == 'node/%' && ($node = menu_get_object()) && conduit_node_type($node->type) && $node->uid == $user->uid) {
      $parent = $node->type == 'conduit_group' ? $node->nid : $node->conduit_parent[LANGUAGE_NONE][0]['nid'];
      $types = conduit_types();
    }

    // Generate a set of links for each conduit category and one for group.
    $block['content'] = array();
    foreach ($types as $type => $name) {
      if (node_access('create', $type)) {
        // Assign links to either their respective conduit category or general.
        // All conduit category jobs will be listed under general.
        $category = ($info = conduit_job_info($type)) ? $info['category'] : 'conduit';
        if ($category == 'conduit') $category = 'general';
        if (!isset($block['content'][$category])) {
          $block['content'][$category] = array(
            '#theme' => 'links',
            '#heading' => array(
              'text' => ucfirst($category),
              'level' => 'h2',
            ),
            '#links' => array(),
          );
        }
        $block['content'][$category]['#links'][$name] = array(
          'title' => $name,
          'href'=> 'node/add/' . str_replace('_', '-', $type),
        );
        if (isset($parent)) {
          $block['content'][$category]['#links'][$name]['query'] = array('parent' => $parent);
        }
        ksort($block['content'][$category]['#links']);
      }
    }
    ksort($block['content']);
  }

  return $block;
}

/**
 * Implements hook_block_info_alter().
 */
function conduit_block_info_alter(&$blocks, $theme, $code_blocks) {
  foreach ($blocks['views'] as &$block) {
    unset($type);
    if (strpos($block['info'], 'conduit_job') !== FALSE || strpos($block['info'], 'conduit_group') !== FALSE) $type = 'conduit_group';
    if (strpos($block['info'], 'conduit_group_user') !== FALSE) $type = 'user';
    if (isset($type)) {
      if (empty($block['status'])) {
        $block['status'] = 1;
        $block['region'] = 'sidebar_first';
        $block['weight'] = -9;
        $block['pages'] = "node/add/*\nnode/*/edit";
        if ($type == 'user') {
          $block['visibility'] = BLOCK_VISIBILITY_LISTED;
          $block['pages'] = "user\nuser/*";
        }
      }
      elseif ($type != 'user') {
        // Restrict filter blocks to the content type they are related to.
        $form_state = array(
          'values' => array(
            'types' => array($type => $type),
            'op' => 'Save block',
          ),
        );
        module_load_include('admin.inc', 'block');
        drupal_form_submit('block_admin_configure', $form_state, $block['module'], $block['delta']);
        drupal_get_messages();
      }
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function conduit_page_alter(&$page) {
  if (isset($page['sidebar_first']['views_-exp-conduit_group-default'])) {
    if (isset($page['content']['system_main']['nodes'])) {
      $node = current($page['content']['system_main']['nodes']);
    }
    $page['sidebar_first']['views_-exp-conduit_group-default']['#access'] = isset($node) ? $node['conduit_group']['#access'] : FALSE;
    $page['sidebar_first']['views_-exp-conduit_job-default']['#access'] = isset($node) ? $node['conduit_job']['#access'] : FALSE;
  }
  elseif (isset($page['sidebar_first']['views_-exp-conduit_group_user-default'])) {
    $page['sidebar_first']['views_-exp-conduit_group_user-default']['#access'] = isset($page['content']['system_main']['conduit_group']) ?
      $page['content']['system_main']['conduit_group']['#access'] : FALSE;
  }
}

/**
 * Implements hook_flush_caches().
 */
function conduit_flush_caches() {
  // Rebuild client role permissions.
  if ($role = user_role_load_by_name('conduit client')) {
    user_role_grant_permissions($role->rid, conduit_client_permissions());
  }
}

/**
 * Implements hook_conduit_default_properties().
 */
function conduit_conduit_default_properties() {
  $properties = array(
    'context' => 3,
    'mask' => '/.*/',
    'newline' => 'unix',
    'nomask' => '/(\.\.?|CVS)$/',
    'patch' => array(),
    'path' => array(''),
    'setup' => array(),
    'ssh' => array(),
    'vcs' => array(),
    'verbose' => FALSE,
  );

  // Allow modules to alter the base default properties.
  $module = 'conduit';
  drupal_alter('conduit_default_properties', $properties, $module);
  return $properties;
}

/**
 * Merge group and default properties together with entity's properties.
 *
 * The properties are merged in such a way that the lower the item is on the
 * list the more precedence it has and will those override any properties with
 * the same key from above. The order is as follows: defaults, groups, and job.
 * A tree of groups will be treated in same manor with the root group having
 * the least precedence.
 *
 * Order[group]: (optional) parents(s), self.
 * Order[job]: base_defaults, plugin_defaults, parents(s), self.
 *
 * @param $node
 *   Either a group or job node.
 * @return
 *   Associative array of properties.
 */
function conduit_properties_merge($node) {
  $properties = array();

  // If the node is a job then merge the base and plugin defaults.
  if ($info = conduit_job_info($node->type)) {
    $properties = module_invoke('conduit', 'conduit_default_properties');
    $plugin_defaults = module_invoke($info['module'], 'conduit_default_properties');
    // Allow modules to alter the default properties for the plugin.
    drupal_alter('conduit_default_properties', $plugin_defaults, $info['module']);
    $properties = array_replace_recursive($properties, $plugin_defaults);
  }

  // If the node has a parent then merge its merged properties array.
  if (!empty($node->conduit_parent) && ($parent = node_load($node->conduit_parent[LANGUAGE_NONE][0]['nid']))) {
    $properties = array_replace_recursive($properties, $parent->conduit_properties_merged);
  }

  // Merge the entity's properties.
  $self = !empty($node->conduit_properties) ? $node->conduit_properties[LANGUAGE_NONE][0]['value'] : array();
  $properties = array_replace_recursive($properties, $self);

  // Allow modules to alter the final merged properties.
  drupal_alter('conduit_properties', $properties, $node);

  // If the node is a job then assign the plugin value.
  if ($info) {
    $properties['plugin'] = $info['plugin'];
  }

  return $properties;
}

/**
 * Determine job information based on the node type.
 *
 * @param $type
 *   Node type.
 * @return
 *   An associative array with the keys: module, category, and plugin,
 *   otherwise FALSE if the node type does not represent a job.
 */
function conduit_job_info($type) {
  if (!($info = &drupal_static(__FUNCTION__))) {
    $info = ($cache = cache_get(__FUNCTION__)) ? $cache->data : array();
  }

  if (!isset($info[$type])) {
    if (strpos($type, 'conduit_job') === 0) {
      // All job node types should be in the form conduit_job_CATEGORY_PLUGIN.
      list(, , $category, $plugin) = explode('_', $type);
      $info[$type] = array(
        'module' => $category . '_' . $plugin,
        'category' => $category,
        'plugin' => $plugin,
      );
      cache_set(__FUNCTION__, $info);
    }
    else {
      $info[$type] = FALSE;
    }
  }

  return $info[$type];
}

/**
 * Determine the conduit categories available given the job node types.
 *
 * @return
 *   Associative array of categories.
 */
function conduit_categories() {
  if (!($categories = &drupal_static(__FUNCTION__))) {
    $categories = ($cache = cache_get(__FUNCTION__)) ? $cache->data : array();
  }

  if (!$categories) {
    $types = array_keys(node_type_get_names());
    foreach ($types as $type) {
      if ($info = conduit_job_info($type)) {
        $categories[$info['category']] = $info['category'];
      }
    }
    cache_set(__FUNCTION__, $categories);
  }

  return $categories;
}

/**
 * Determine the conduit node types available.
 *
 * @see conduit_node_type()
 */
function conduit_types() {
  if (!($types = &drupal_static(__FUNCTION__))) {
    $types = ($cache = cache_get(__FUNCTION__)) ? $cache->data : array();
  }

  if (!$types) {
    $types = array_flip(array_filter(array_flip(node_type_get_names()), 'conduit_node_type'));
    cache_set(__FUNCTION__, $types);
  }

  return $types;
}

/**
 * Get a word representation of a job status code.
 *
 * @param $status
 *   Job status code.
 * @return
 *   Word representation of a job status code.
 */
function conduit_status($status) {
  static $map = array('active', 'setup', 'fail', 'pass');
  return isset($map[$status]) ? $map[$status] : FALSE;
}

/**
 * Build a list of the client role permissions.
 *
 * @return
 *   List of client role permissions.
 */
function conduit_client_permissions() {
  $types = array_filter(array_keys(node_type_get_names()), 'conduit_node_type');
  $operations = array('create', 'edit own', 'delete own');
  $permissions = array();
  foreach ($types as $type) {
    foreach ($operations as $operation) {
      $permissions[] = "$operation $type content";
    }
  }
  $permissions[] = 'view revisions';
  $permissions[] = 'view conduit log';
  $permissions[] = 'repeat conduit job';
  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function conduit_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'conduit') . '/views',
  );
}

/**
 * Implements hook_views_data_alter().
 */
function conduit_views_data_alter(&$data) {
  $data['field_data_conduit_duration']['conduit_duration_value']['field']['handler'] = 'views_handler_field_time_interval';
  $data['field_revision_conduit_duration']['conduit_duration_value']['field']['handler'] = 'views_handler_field_time_interval';
}

/**
 * Implements hook_views_pre_render().
 */
function conduit_views_pre_render($view) {
  if (strpos($view->name, 'conduit') === 0) {
    // Add conduit css to all conduit views.
    drupal_add_css(drupal_get_path('module', 'conduit') . '/conduit.css');
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function conduit_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    conduit_include('services');
    return array('version' => 3);
  }
}

/**
 * Load a conduit include file.
 *
 * @param $include
 *   Name of include file, exluding the .inc.
 */
function conduit_include($include) {
  require_once drupal_get_path('module', 'conduit') . '/includes/' . $include . '.inc';
}
