<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * @mainpage Conduit
 * Conduit is a job distribution system.
 *
 * For information on the base job properties see the
 * @link worker_perform worker_perform() @endlink.
 */

/**
 * Status of job: failed during setup.
 */
define('CONDUIT_STATUS_SETUP', 1);

/**
 * Status of job: plugin encountered a failure.
 */
define('CONDUIT_STATUS_FAIL', 2);

/**
 * Status of job: pluging passed.
 */
define('CONDUIT_STATUS_PASS', 3);

conduit_include('node');

/**
 * Implements hook_permission().
 */
function conduit_permission() {
  $permissions = array();

  $permissions['view all conduit content'] = array(
    'title' => t('View all content'),
    'description' => t('Override the default behavior of only allowing the onwer to view their own content.'),
  );
  $permissions['view conduit log'] = array(
    'title' => t('View log'),
    'description' => t('View the log for a job.'),
  );
  $permissions['repeat conduit job'] = array(
    'title' => t('Repeat job'),
    'description' => t('Repeat a job without editting.'),
  );

  // Worker permissions.
  $permissions['claim conduit item'] = array(
    'title' => t('Claim an item'),
    'description' => t('Claim an item from a category queue. <em>Required by all workers.</em>'),
  );
  $permissions['result conduit item'] = array(
    'title' => t('Store a result for an item'),
    'description' => t('Store a chunk result. <em>Required by all workers.</em>'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function conduit_menu() {
  $items = array();

  $items['node/%node/properties'] = array(
    'title' => 'Properties',
    'page callback' => 'conduit_node_properties',
    'page arguments' => array(1),
    'access callback' => 'conduit_node_properties_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/revisions/%/properties'] = $items['node/%node/properties'];
  $items['node/%node/revisions/%/properties']['load arguments'] = array(3);
  $items['node/%node/revisions/%/properties']['access arguments'][] = TRUE;

  $items['node/%node/repeat'] = array(
    'title' => 'Repeat',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('conduit_view_repeat_confirm_form', 1),
    'access callback' => 'conduit_node_repeat_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['admin/reports/conduit'] = array(
    'title' => 'Conduit',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access site reports'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/reports/conduit/queue'] = array(
    'title' => 'Queue',
    'description' => 'View a table of the number of items in each category queue.',
    'page callback' => 'conduit_report_queue',
    'access arguments' => array('access site reports'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function conduit_menu_alter(&$items) {
  // Move view router item one level down to become parent for tabs.
  $items['node/%node/revisions/%'] = $items['node/%node/revisions/%/view'];

  // Override view router item to create a default local task.
  $items['node/%node/revisions/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
}

/**
 * Implements hook_block_info().
 */
function conduit_block_info() {
  return array(
    'conduit' => array(
      'info' => t('conduit'),
      'cache' => DRUPAL_NO_CACHE,
      'status' => 1,
      'region' => 'sidebar_first',
      'weight' => -10,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function conduit_block_view($delta = '') {
  global $user;
  $block = array();

  // Only bother generating the list of jobs and group that can be created for
  // users with the 'conduit client' role.
  if (in_array('conduit client', $user->roles)) {
    // Check to see if on a user's own account page or a group/job node owned
    // by the user. To simplify things don't display the block to users viewing
    // user's groups/jobs.
    $types = array();
    $router_item = menu_get_item();
    if ($router_item['path'] == 'user/%/groups' && arg(1) == $user->uid) {
      $types = conduit_types();
      $types = array('conduit_group' => $types['conduit_group']);
    }
    elseif ($router_item['path'] == 'node/%' && ($node = menu_get_object()) && conduit_node_type($node->type) && $node->uid == $user->uid) {
      $parent = $node->type == 'conduit_group' ? $node->nid : $node->conduit_parent[LANGUAGE_NONE][0]['target_id'];
      $types = conduit_types();
    }

    // Generate a set of links for each conduit category and one for group.
    $block['content'] = array();
    foreach ($types as $type => $name) {
      if (node_access('create', $type)) {
        // Assign links to either their respective conduit category or general.
        // All conduit category jobs will be listed under general.
        $category = ($info = conduit_job_info($type)) ? $info['category'] : 'conduit';
        if ($category == 'conduit') $category = 'general';
        if (!isset($block['content'][$category])) {
          $block['content'][$category] = array(
            '#theme' => 'links',
            '#heading' => array(
              'text' => ucfirst($category),
              'level' => 'h2',
            ),
            '#links' => array(),
          );
        }
        $block['content'][$category]['#links'][$name] = array(
          'title' => $name,
          'href'=> 'node/add/' . str_replace('_', '-', $type),
        );
        if (isset($parent)) {
          $block['content'][$category]['#links'][$name]['query'] = array('parent' => $parent);
        }
        ksort($block['content'][$category]['#links']);
      }
    }
    ksort($block['content']);
  }

  return $block;
}

/**
 * Implements hook_block_info_alter().
 *
 * Enable exposed views filter blocks.
 */
function conduit_block_info_alter(&$blocks, $theme, $code_blocks) {
  foreach ($blocks['views'] as &$block) {
    foreach (array('conduit_job', 'conduit_group', 'conduit_group_user', 'conduit_usage') as $view) {
      if (strpos($block['info'], $view) !== FALSE) {
        $block['status'] = 1;
        $block['region'] = 'sidebar_first';
        $block['weight'] = -9;
        break;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter(): views_exposed_form.
 */
function conduit_form_views_exposed_form_alter(&$form, &$form_state) {
  $view = conduit_view_block_form_info($form['#id']);
  if ($view == 'conduit_group_user' || $view == 'conduit_usage') {
    $router_item = menu_get_item();
    $form['#access'] = $router_item['path'] == 'user/%/' . ($view == 'conduit_usage' ? 'usage' : 'groups');
  }
  elseif ($view == 'conduit_group' || $view == 'conduit_job') {
    $router_item = menu_get_item();
    $node = menu_get_object();
    $form['#access'] = ($router_item['path'] == 'node/%' || $router_item['path'] == 'node/%/revisions/%') && $node->type == 'conduit_group';
  }
}

/**
 * Get the view name from an exposed block filter form.
 *
 * @param $form_id
 *   The form ID of an exposed block filter form.
 * @return
 *   View name related to exposed block filter form.
 */
function conduit_view_block_form_info($form_id) {
  if (preg_match('/views-exposed-form-(.*?)-\w+$/m', $form_id, $match)) {
    return str_replace('-', '_', $match[1]);
  }
  return FALSE;
}

/**
 * Implements hook_page_alter().
 */
function conduit_page_alter(&$page) {
  // Further restrict access to group and job blocks based on current node's
  // group and job views #access property.
  if (isset($page['sidebar_first']['views_-exp-conduit_group-default'])) {
    if (isset($page['content']['system_main']['nodes'])) {
      $node = current($page['content']['system_main']['nodes']);
    }
    $page['sidebar_first']['views_-exp-conduit_group-default']['#access'] = isset($node) ? $node['conduit_group']['#access'] : FALSE;
    $page['sidebar_first']['views_-exp-conduit_job-default']['#access'] = isset($node) ? $node['conduit_job']['#access'] : FALSE;
  }
}

/**
 * Implements hook_field_access().
 */
function conduit_field_access($op, $field, $entity_type, $entity, $account) {
  // Only allow the public field to be editted on conduit client users.
  if ($field['field_name'] == 'conduit_public' && $op == 'edit') {
    return in_array('conduit client', $entity->roles);
  }
}

/**
 * Implements hook_flush_caches().
 */
function conduit_flush_caches() {
  // Rebuild client role permissions.
  if ($role = user_role_load_by_name('conduit client')) {
    $permissions = drupal_map_assoc(conduit_client_permissions());
    $current = user_role_permissions(array($role->rid => $role->rid));
    foreach ($current[$role->rid] as $permission => $status) {
      if (!isset($permissions[$permission])) {
        $permissions[$permission] = FALSE;
      }
    }
    user_role_change_permissions($role->rid, $permissions);
  }
}

/**
 * Conduit user access rules.
 *
 * Called by conduit_node_access().
 *
 * @param $account
 *   A user object of the account attempting to be viewed.
 * @param $user
 *   The user object attempting to view the account.
 * @return
 *   TRUE if access granted, otherwise FALSE.
 */
function conduit_user_access($account, $user = NULL) {
  // Default to global user if non specified.
  if (!$user) $user = $GLOBALS['user'];

  // Conduit user access only applies to conduit clients.
  if (!in_array('conduit client', $account->roles)) {
    return FALSE;
  }

  // If the user being viewed has public option enabled then allow access.
  if (isset($account->conduit_public[LANGUAGE_NONE]) && $account->conduit_public[LANGUAGE_NONE][0]['value']) {
    return TRUE;
  }
  // Check to see if master the user has the override permission otherwise
  // check if the standard access rules pass.
  return user_access('view all conduit content', $user) || conduit_user_view_access($account, $user);
}

/**
 * Adapted from user_view_access() to accept second parameter of $user.
 *
 * @param $account
 *   A user object of the account attempting to be viewed.
 * @param $user
 *   The user object attempting to view the account.
 * @return
 *   TRUE if access granted, otherwise FALSE.
 * @see user_view_access()
 */
function conduit_user_view_access($account, $user) {
  $uid = is_object($account) ? $account->uid : (int) $account;

  // Never allow access to view the anonymous user account.
  if ($uid) {
    // Admins can view all, users can view own profiles at all times.
    if ($user->uid == $uid || user_access('administer users', $user)) {
      return TRUE;
    }
    elseif (user_access('access user profiles', $user)) {
      // At this point, load the complete account object.
      if (!is_object($account)) {
        $account = user_load($uid);
      }
      return (is_object($account) && $account->status);
    }
  }
  return FALSE;
}

/**
 * Implements hook_conduit_default_properties().
 */
function conduit_conduit_default_properties() {
  $properties = array(
    'build' => array(),
    'context' => 3,
    'mask' => '/.*/',
    'newline' => 'unix',
    'nomask' => '/(\.\.?|CVS)$/',
    'patch' => array(),
    'path' => array(''),
    'setup' => array(),
    'ssh' => array(),
    'vcs' => array(),
    'verbose' => FALSE,
  );

  // Allow modules to alter the base default properties.
  $module = 'conduit';
  drupal_alter('conduit_default_properties', $properties, $module);
  return $properties;
}

/**
 * Merge group and default properties together with entity's properties.
 *
 * The properties are merged in such a way that the lower the item is on the
 * list the more precedence it has and will those override any properties with
 * the same key from above. The order is as follows: defaults, groups, and job.
 * A tree of groups will be treated in same manor with the root group having
 * the least precedence.
 *
 * Order[group]: (optional) parents(s), self.
 * Order[job]: base_defaults, plugin_defaults, parents(s), self.
 *
 * @param $node
 *   Either a group or job node.
 * @return
 *   Associative array of properties.
 */
function conduit_properties_merge($node) {
  $properties = array();

  // If the node is a job then merge the base and plugin defaults.
  if ($info = conduit_job_info($node->type)) {
    $properties = module_invoke('conduit', 'conduit_default_properties');
    $plugin_defaults = module_invoke($info['module'], 'conduit_default_properties');
    // Allow modules to alter the default properties for the plugin.
    drupal_alter('conduit_default_properties', $plugin_defaults, $info['module']);
    $properties = array_replace($properties, $plugin_defaults);
  }

  // If the node has a parent then merge its merged properties array.
  if (!empty($node->conduit_parent) && ($parent = node_load($node->conduit_parent[LANGUAGE_NONE][0]['target_id']))) {
    $properties = array_replace($properties, $parent->conduit_properties_merged);
  }

  // Merge the entity's properties.
  $self = !empty($node->conduit_properties) ? $node->conduit_properties[LANGUAGE_NONE][0]['value'] : array();
  $properties = array_replace($properties, $self);

  // Allow modules to alter the final merged properties.
  drupal_alter('conduit_properties', $properties, $node);

  // If the node is a job then assign the plugin value.
  if ($info) {
    $properties['plugin'] = $info['plugin'];
  }

  return $properties;
}

/**
 * Determine job information based on the node type.
 *
 * @param $type
 *   Node type.
 * @return
 *   An associative array with the keys: module, category, and plugin,
 *   otherwise FALSE if the node type does not represent a job.
 */
function conduit_job_info($type) {
  if (!($info = &drupal_static(__FUNCTION__))) {
    $info = ($cache = cache_get(__FUNCTION__)) ? $cache->data : array();
  }

  if (!isset($info[$type])) {
    if (strpos($type, 'conduit_job') === 0) {
      // All job node types should be in the form conduit_job_CATEGORY_PLUGIN.
      list(, , $category, $plugin) = explode('_', $type);
      $info[$type] = array(
        'module' => $category . '_' . $plugin,
        'category' => $category,
        'plugin' => $plugin,
      );
      cache_set(__FUNCTION__, $info);
    }
    else {
      $info[$type] = FALSE;
    }
  }

  return $info[$type];
}

/**
 * Determine the conduit categories available given the job node types.
 *
 * @return
 *   Associative array of categories.
 */
function conduit_categories() {
  if (!($categories = &drupal_static(__FUNCTION__))) {
    $categories = ($cache = cache_get(__FUNCTION__)) ? $cache->data : array();
  }

  if (!$categories) {
    $types = array_keys(node_type_get_names());
    foreach ($types as $type) {
      if ($info = conduit_job_info($type)) {
        $categories[$info['category']] = $info['category'];
      }
    }
    cache_set(__FUNCTION__, $categories);
  }

  return $categories;
}

/**
 * Determine the conduit node types available.
 *
 * @see conduit_node_type()
 */
function conduit_types() {
  if (!($types = &drupal_static(__FUNCTION__))) {
    $types = ($cache = cache_get(__FUNCTION__)) ? $cache->data : array();
  }

  if (!$types) {
    $types = array_flip(array_filter(array_flip(node_type_get_names()), 'conduit_node_type'));
    cache_set(__FUNCTION__, $types);
  }

  return $types;
}

/**
 * Get a word representation of a job status code.
 *
 * @param $status
 *   Job status code.
 * @return
 *   Word representation of a job status code.
 */
function conduit_status($status) {
  static $map = array('active', 'setup', 'fail', 'pass');
  return isset($map[$status]) ? $map[$status] : FALSE;
}

/**
 * Build a list of the client role permissions.
 *
 * @return
 *   List of client role permissions.
 */
function conduit_client_permissions() {
  $types = array_filter(array_keys(node_type_get_names()), 'conduit_node_type');
  $operations = array('create', 'edit own', 'delete own');
  $permissions = array();
  foreach ($types as $type) {
    foreach ($operations as $operation) {
      $permissions[] = "$operation $type content";
    }
  }
  $permissions[] = 'view revisions';
  $permissions[] = 'view conduit log';
  $permissions[] = 'repeat conduit job';

  // Allow client permissions to be altered.
  drupal_alter('conduit_client_permissions', $permissions);

  return $permissions;
}

/**
 * Implements hook_conduit_finished().
 */
function conduit_conduit_finished($node) {
  // Log any jobs that cause the worker to crash.
  if ($node->conduit_status[LANGUAGE_NONE][0]['value'] == CONDUIT_STATUS_SETUP &&
    $node->conduit_summary[LANGUAGE_NONE][0]['value'] == 'Worker crashed') {
    watchdog('conduit', 'Worker crashed on job @nid.@vid.', array('@nid' => $node->nid, '@vid' => $node->vid), WATCHDOG_CRITICAL,
      l('view', 'node/' . $node->nid . '/revisions/' . $node->vid));
  }
}

/**
 * Display a table of the number of items in each category queue.
 */
function conduit_report_queue() {
  conduit_include('queue');
  $rows = array();
  foreach (conduit_categories() as $category) {
    $rows[] = array($category, number_format(conduit_queue_count($category)));
  }
  return array(
    '#theme' => 'table',
    '#header' => array(t('Queue'), t('Count')),
    '#rows' => $rows,
  );
}

/**
 * Implements hook_user_presave().
 */
function conduit_user_presave(&$edit, $account, $category) {
  if (!$account->uid) {
    $edit['conduit_public'][LANGUAGE_NONE][0]['value'] = (int) FALSE;
    $edit['conduit_ask'][LANGUAGE_NONE][0]['value'] = (int) TRUE;
  }
}

/**
 * Implements hook_views_api().
 */
function conduit_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'conduit') . '/views',
  );
}

/**
 * Implements hook_views_data_alter().
 */
function conduit_views_data_alter(&$data) {
  $data['field_data_conduit_duration']['conduit_duration_value']['field']['handler'] = 'views_handler_field_time_interval';
  $data['field_revision_conduit_duration']['conduit_duration_value']['field']['handler'] = 'views_handler_field_time_interval';
}

/**
 * Implements hook_views_pre_render().
 */
function conduit_views_pre_render($view) {
  if (strpos($view->name, 'conduit') === 0) {
    // Add conduit css to all conduit views.
    drupal_add_css(drupal_get_path('module', 'conduit') . '/conduit.css');

    // Print help text when the user has no groups.
    if ($view->name == 'conduit_group_user' && empty($view->result) &&
      ($router_item = menu_get_item()) && ($router_item['path'] == 'node/%' || $router_item['path'] == 'user/%/groups')) {
      drupal_set_message(t('Use the links on the side to create groups.'));
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function conduit_ctools_plugin_api($module, $api) {
  if ($module == 'services' && $api == 'services') {
    conduit_include('services');
    return array('version' => 3);
  }

  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}

/**
 * Load a conduit include file.
 *
 * @param $include
 *   Name of include file, exluding the .inc.
 */
function conduit_include($include) {
  require_once drupal_get_path('module', 'conduit') . '/includes/' . $include . '.inc';
}
