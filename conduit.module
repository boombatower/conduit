<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * @mainpage Conduit
 * Conduit is a job distribution system.
 *
 * For information on the base job properties see the
 * @link worker_perform worker_perform() @endlink.
 */

conduit_include('node');

/**
 * Implements hook_permission().
 */
function conduit_permission() {
  $permissions = array();

  foreach (array('meta', 'status', 'result') as $fieldset) {
    $permissions['edit conduit job ' . $fieldset] = array(
      'title' => t('Edit job @fieldset information.', array('@fieldset' => $fieldset)),
      'description' => t('Edit the fields conntained within the @fieldset fieldset.', array('@fieldset' => $fieldset)),
    );
  }

  $permissions['claim conduit item'] = array(
    'title' => t('Claim an item'),
    'description' => t('Claim an item from a category queue. <em>Required by all workers.</em>'),
  );
  $permissions['result conduit item'] = array(
    'title' => t('Store a result for an item'),
    'description' => t('Store a chunk result. <em>Required by all workers.</em>'),
  );

  return $permissions;
}

/**
 * Merge group and default properties together with entity's properties.
 *
 * The properties are merged in such a way that the lower the item is on the
 * list the more precedence it has and will those override any properties with
 * the same key from above. The order is as follows: defaults, groups, and job.
 * A tree of groups will be treated in same manor with the root group having
 * the least precedence.
 *
 * @param $node
 *   Either a group or job node.
 * @return
 *   Associative array of properties.
 */
function conduit_properties_merge($node) {
  // Start with the properties of the entity.
  $properties = !empty($node->conduit_properties) ? $node->conduit_properties[LANGUAGE_NONE][0]['value'] : array();

  // If the entity is a job then merge the default properties specified by the
  // plugin with the rest of the properties. Add the plugin property based on
  // job type.
  if ($info = conduit_job_info($node->type)) {
    $default_properties = module_invoke($info['module'], 'conduit_default_properties');
    $properties = array_replace_recursive($default_properties, $properties);
    $properties['plugin'] = $info['plugin'];
  }

  // Find the relevant parent group or client the entity belongs to and merge
  // its merged properties array with the current entity.
  if (!empty($node->conduit_parent)) {
    $parent = node_load($node->conduit_parent[LANGUAGE_NONE][0]['nid']);
    $properties = array_replace_recursive($parent->conduit_properties_merged, $properties);
  }

  return $properties;
}

/**
 * Determine job information based on the node type.
 *
 * @param $type
 *   Node type.
 * @return
 *   An associative array with the keys: module, category, and plugin,
 *   otherwise FALSE if the node type does not represent a job.
 */
function conduit_job_info($type) {
  if (strpos($type, 'conduit_job') === 0) {
    // All job node types should be in the form conduit_job_CATEGORY_PLUGIN.
    list(, , $category, $plugin) = explode('_', $type);
    return array(
      'module' => $category . '_' . $plugin,
      'category' => $category,
      'plugin' => $plugin,
    );
  }
  return FALSE;
}

/**
 * Implements hook_flush_caches().
 *
 * When any modules are enabled rebuild the list of allowed_values for
 * conduit_category to ensure it is up-to-date.
 */
function conduit_flush_caches() {
  // Determine the categories available given the job node types.
  $types = array_keys(node_type_get_types());
  $categories = array();
  foreach ($types as $type) {
    if ($info = conduit_job_info($type)) {
      $categories[$info['category']] = ucfirst($info['category']);
    }
  }

  // Build list of allowed values.
  $allowed_values = '';
  foreach ($categories as $category => $title) {
    $allowed_values .= "$category|$title\n";
  }
  $allowed_values = trim($allowed_values);

  // Grab the field definition, check for changes to the allowed_values, and
  // if changed then update the conduit_category field.
  $field = current(field_read_fields(array('field_name' => 'conduit_category')));
  if ($field['settings']['allowed_values'] != $allowed_values) {
    $field['settings']['allowed_values'] = $allowed_values;
    field_update_field($field);

    // Ensure queues for each category exist.
    foreach ($categories as $category) {
      DrupalQueue::get('conduit_job_' . $category)->createQueue();
    }

    // Keep a list of all categories ever used for cleanup during uninstall.
    $all_categories = variable_get('conduit_categories', array());
    $categories = drupal_map_assoc($categories);
    variable_set('conduit_categories', array_merge($all_categories, $categories));
  }
}

/**
 * Implements hook_views_api().
 */
function conduit_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'conduit') . '/views',
  );
}

/**
 * Implements hook_views_api().
 */
function conduit_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    conduit_include('services');
    return array('version' => 3);
  }
}

/**
 * Load a conduit include file.
 *
 * @param $include
 *   Name of include file, exluding the .inc.
 */
function conduit_include($include) {
  require_once drupal_get_path('module', 'conduit') . '/includes/' . $include . '.inc';
}
